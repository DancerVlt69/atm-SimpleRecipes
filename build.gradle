buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		// jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def buildPropFile = file('.env/dev.env')
Properties buildProps = new Properties()
buildProps.load(buildPropFile.newDataInputStream())
def buildNum = buildProps.getProperty("BUILDNUMBER") as String

println ("Build is ${buildNum}.")

// version = '1.0'
version = "${mcVersions}-${modVersion}-${buildNum}"
group = "net.${modOwner}.${modId}"
archivesBaseName = "${modId}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        name = "Progwm16 JEI maven"
        url = "https://dvs1.progwml6.com//files/maven/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

minecraft {
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'list'

			//property 'username', 'JMSR'
			
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'jmsr_forge'
            
			mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'list'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'jmsr_forge'
			
            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }
		
		gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'jmsr_forge'

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }
		
		data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.

            args '--mod', 'jmsr_forge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    minecraft "net.minecraftforge:forge:1.18.2-${forgeVersion}"
    // 1.18.2-40.1.51"

    // JEI - Just Enough Items
    // compileOnly fg.deobf("mezz.jei:jei-${mcMappingVersion}:${jeiVersion}:api")
    // runtimeOnly fg.deobf("curse.maven:jei-238222:3874762")
    runtimeOnly fg.deobf("curse.maven:jei-${jeiVersionCF}")
    // runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.152")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mcMappingVersion}:${jeiVersion}")

    // Jade (Hwyla Fork)
    runtimeOnly fg.deobf("curse.maven:jade-${jadeVersionCF}")
}

// Combine main and API source sets
jar {
    // from sourceSets.main.output
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : project.modOwner,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : project.modVersion,
                "Implementation-Vendor"   : project.modOwner,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task incrementBuildNumber {
    // def buildPropFile = file('.env/dev.env')
    def gTask = System.getenv("TASK")
    if (gTask == "createJAR") {
        if (buildPropFile.canRead()) {
            // Properties buildProps = new Properties()
            buildProps.load(buildPropFile.newDataInputStream())
            Integer newBuildNumber = (buildProps.getProperty('BUILDNUMBER') as BigInteger + 1)
            buildProps.setProperty('BUILDNUMBER', newBuildNumber.toString())
            buildProps.store(buildPropFile.newWriter(), null)
            buildProps.load(buildPropFile.newDataInputStream())
            println("newBuildNumber is set to ${newBuildNumber}.\n")
        } else {
            throw new FileNotFoundException("Can not read the property file!")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
