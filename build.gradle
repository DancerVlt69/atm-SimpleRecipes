buildscript {

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.2.6' // Discord WebHook
        // classpath 'net.dancervlt69:optifine:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'maven-publish'
    // id 'eclipse' // only needed if you use Eclipse
}

// added to read (your) MC-Account data from an external file to save your personal data
apply from: '/gradle/mcAccount.gradle'
apply from: '/gradle/updVerNum.gradle'
apply from: '/gradle/repositories.gradle' // repositories moved to external file
apply from: '/gradle/dependencies.gradle' // dependencies moved to external file

projectVersion = System.getProperty("projectVer")
version = "${mcVersionRange}-${projectVersion}"
group = "${projectGroup}"

java {
    archivesBaseName = "${projectBaseName}"
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories repos // external file 'repositories.gradle' in directory '/gradle/'

//configurations { embedNoCompile }

minecraft {
    // mappings channel: 'official', version: '1.16.5' //'snapshot'
    // mappings channel: 'official', version: "${mcMappingVersion}" // ${mcMappingVersion} //'snapshot'
    mappings channel: 'parchment', version: "${parchmentDate}-${mcMappingVersion}"   // '2021.08.15-1.17.1'

    runs {
        client {
            args '--uuid', System.getProperty("uuID")
            args '--username', System.getProperty("userName")

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }

		data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'jmsr_forge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies depends // dependencies moved to a external gradle file in the gradle folder

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.projectName,
                "Specification-Vendor"    : project.projectOwner,
                "Specification-Version"   : project.projectVersion,
                "Implementation-Title"    : project.projectName,
                "Implementation-Version"  : project.projectVersion,
                "Implementation-Vendor"   : project.projectOwner,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.publish.dependsOn build

task (pub) {
    apply from: '/gradle/projectPublishing.gradle'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// task releaseJars(type: Copy) {
//    from incrementBuildNumber
//    from jar
// }
