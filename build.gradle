buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" } //maven { url = 'https://maven.minecraftforge.net' }
//        maven { url = "https://cursemaven.com"}
//        maven { url = "https://maven.tehnut.info" }
//        // maven { url = "https://minecraft.curseforge.com/api/maven" }
//
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'java-library'
apply plugin: 'maven-publish'

// apply plugin: 'eclipse'


// added to read (your) MC-Account data from an external file to save your personal data
apply from: '/gradle/mcAccount.gradle'
apply from: '/gradle/updVerNum.gradle'

projectVersion = System.getProperty("projectVer")
version = "${mcVersionRange}-${projectVersion}"
group = "${projectGroup}"

archivesBaseName = "${projectBaseName}"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"

repositories {
    // location of the maven that hosts JEI files before January 2023
    maven { name = "Progwm16 JEI maven";    url = "https://dvs1.progwml6.com//files/maven/" }
    // location of the maven that hosts JEI files since January 2023
    maven { name = "Jared's maven";         url = "https://maven.blamejared.com/" }
    // location of a maven mirror for JEI files, as a fallback
    maven { name = "ModMaven";              url = "https://modmaven.dev" }
    // Curse Maven
    maven { name = "Curse Maven";           url = "https://cursemaven.com" } // ; content { includeGroup "curse.maven" } }
    // Curse Forge
    maven { name = "CurseForge";            url = "https://minecraft.curseforge.com/api/maven/" }
}

minecraft {
    // mappings channel: 'snapshot', version: '20200514-1.15.1'
    mappings channel: 'official', version: "${mcMappingVersion}" // ${mcMappingVersion} //'snapshot'

    runs {
        client {
            args '--uuid', System.getProperty("uuID")
            args '--username', System.getProperty("userName")

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }

		data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'jmsr_forge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jmsr_forge {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.15.2-31.2.57" // ${minecraftVersion}-${forgeVersion}"

    // JEI - Just Enough Items
    // compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}:${jeiVersion}:api")
    // runtimeOnly fg.deobf("curse.maven:jei-238222:3874762")
    // runtimeOnly fg.deobf("curse.maven:jei-${jeiVersionCF}")
    // runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.152")
    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:${jeiVersion}")
    // runtimeOnly fg.deobf("curse.maven:jei-${jeiVersionCF}")

    // Jade (Hwyla Fork)
    // runtimeOnly fg.deobf("curse.maven:jade-${jadeVersionCF}")

    // Hwyla
    // compileOnly fg.deobf("curse.maven:hwyla-${hwylaApiVersionCF}")
    // runtimeOnly fg.deobf("curse.maven:hwyla-${hwylaVersionCF}")
    // compileOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.8-B72:api")
    // runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.8-B72")

    // Xaero's World & Mini Map
    // runtimeOnly fg.deobf("curse.maven:xaerom-${xaeroMiniVersionCF}")
    // runtimeOnly fg.deobf("curse.maven:xaerow-${xaeroWorldVersionCF}")

    // Journey Map
    // runtimeOnly fg.deobf("curse.maven:journey-${journeyVersionCF}")

    // implementation( gradleApi() )
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.projectName,
                "Specification-Vendor"    : project.projectOwner,
                "Specification-Version"   : System.getProperty("projectVer"),
                "Implementation-Title"    : project.projectName,
                "Implementation-Version"  : System.getProperty("projectVer"),
                "Implementation-Vendor"   : project.projectOwner,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.publish.dependsOn build

task (pub) {
    apply from: '/gradle/projectPublishing.gradle'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
